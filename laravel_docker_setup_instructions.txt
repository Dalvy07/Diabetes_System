
# Полная инструкция по настройке окружения Laravel с использованием Docker

## Шаг 1. Установка Docker

- **Зачем?**  
  Docker позволяет изолировать окружение для разработки. Вы можете запускать PHP, MySQL, Nginx и другие сервисы в контейнерах, независимо от настроек вашего локального компьютера.

- **Как установить?**  
  1. Скачайте и установите [Docker Desktop](https://www.docker.com/products/docker-desktop) для Windows/Mac или Docker Engine для Linux.  
  2. Убедитесь, что Docker установлен:  
     ```bash
     docker --version
     docker-compose --version
     ```

---

## Шаг 2. Создание структуры проекта

- **Что делать?**  
  1. Создайте папку для вашего проекта:
     ```bash
     mkdir laravel-docker
     cd laravel-docker
     ```
  2. Создайте необходимые папки и файлы:
     ```bash
     mkdir nginx src
     touch docker-compose.yml Dockerfile nginx/default.conf
     ```

- **Зачем?**  
  Это подготовит базовую структуру проекта, в которой будут храниться файлы Docker, конфигурации Nginx и исходный код Laravel.

---

## Шаг 3. Настройка Docker Compose

- **Что делать?**  
  Откройте файл `docker-compose.yml` и добавьте следующую конфигурацию:

  ```yaml
  version: '3.8'

  services:
    app:
      build:
        context: .
        dockerfile: Dockerfile
      container_name: laravel_app
      volumes:
        - ./src:/var/www/html
      ports:
        - "8000:8000"
      depends_on:
        - db

    db:
      image: mysql:8.0
      container_name: laravel_db
      environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: laravel
        MYSQL_USER: laravel
        MYSQL_PASSWORD: password
      ports:
        - "3306:3306"
      volumes:
        - db_data:/var/lib/mysql

    nginx:
      image: nginx:latest
      container_name: laravel_nginx
      volumes:
        - ./src:/var/www/html
        - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      ports:
        - "8080:80"
      depends_on:
        - app

  volumes:
    db_data:
  ```

- **Зачем?**  
  Этот файл управляет контейнерами: PHP, MySQL и Nginx. Он связывает код Laravel в папке `src` с контейнером PHP и задаёт MySQL как базу данных.

---

## Шаг 4. Создание Dockerfile

- **Что делать?**  
  Откройте файл `Dockerfile` и добавьте следующий код:

  ```dockerfile
  FROM php:8.2-fpm

  RUN apt-get update && apt-get install -y       git       zip       unzip       libpq-dev       libonig-dev       libxml2-dev       build-essential       curl       && docker-php-ext-install pdo pdo_mysql mbstring xml

  COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

  WORKDIR /var/www/html
  ```

- **Зачем?**  
  Это файл для сборки контейнера PHP. В нём устанавливаются необходимые расширения PHP и Composer, который используется Laravel.

---

## Шаг 5. Настройка Nginx

- **Что делать?**  
  Откройте файл `nginx/default.conf` и добавьте следующий код:

  ```nginx
  server {
      listen 80;
      index index.php index.html;
      root /var/www/html/public;

      location / {
          try_files $uri $uri/ /index.php?$query_string;
      }

      location ~ \.php$ {
          include fastcgi_params;
          fastcgi_pass app:9000;
          fastcgi_index index.php;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      }

      location ~ /\.ht {
          deny all;
      }
  }
  ```

- **Зачем?**  
  Это конфигурация веб-сервера Nginx, который обрабатывает запросы к приложению Laravel.

---

## Шаг 6. Сборка и запуск контейнеров

- **Что делать?**  
  1. Соберите контейнеры:
     ```bash
     docker-compose build
     ```
  2. Запустите контейнеры:
     ```bash
     docker-compose up -d
     ```
  3. Проверьте, что контейнеры работают:
     ```bash
     docker ps
     ```

- **Зачем?**  
  Это шаг запуска всех сервисов: PHP, MySQL и Nginx.

---

## Шаг 7. Установка Laravel

- **Что делать?**  
  1. Зайдите в контейнер PHP:
     ```bash
     docker exec -it laravel_app bash
     ```
  2. Установите Laravel:
     ```bash
     composer create-project --prefer-dist laravel/laravel .
     exit
     ```

- **Зачем?**  
  Laravel устанавливается в папку `src`, которая монтируется в контейнер.

---

## Шаг 8. Настройка базы данных

- **Что делать?**  
  1. Откройте файл `.env` в папке `src` и настройте подключение к базе данных:
     ```env
     DB_CONNECTION=mysql
     DB_HOST=db
     DB_PORT=3306
     DB_DATABASE=laravel
     DB_USERNAME=laravel
     DB_PASSWORD=password
     ```
  2. Примените миграции:
     ```bash
     docker exec -it laravel_app bash
     php artisan migrate
     exit
     ```

- **Зачем?**  
  Это подключает Laravel к базе данных MySQL и создаёт стандартные таблицы.

---

## Шаг 9. Исправление прав доступа

- **Что делать?**  
  Установите правильные права на папки:
  ```bash
  docker exec -it laravel_app bash
  chmod -R 775 storage bootstrap/cache
  chown -R www-data:www-data storage bootstrap/cache
  exit
  ```

- **Зачем?**  
  Laravel требует права записи для папок `storage` и `bootstrap/cache`.

---

## Шаг 10. Создание таблицы для сессий

- **Что делать?**  
  Если используется `database`-драйвер для хранения сессий:
  ```bash
  docker exec -it laravel_app bash
  php artisan session:table
  php artisan migrate
  exit
  ```

- **Зачем?**  
  Это создаёт таблицу `sessions` в базе данных для хранения данных сессий.

---

## Шаг 11. Проверка работы

- **Что делать?**  
  Откройте браузер и перейдите по адресу:  
  [http://localhost:8080](http://localhost:8080)  

- **Зачем?**  
  Убедитесь, что Laravel корректно работает.

---

## Итог

- Вы настроили окружение для Laravel с помощью Docker.
- PHP 8.2 используется для работы приложения.  
- MySQL используется для хранения данных.  
- Nginx выступает как веб-сервер.  

Если возникнут вопросы или потребуется помощь, пишите!
